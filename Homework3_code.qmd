---
title: "Programming with the tidyverse"
format: pdf
editor: visual
---

```{r}
#| include: false
library(tidyverse)
```

## Task 1

### Part a

We have our data in the appropriate folder. So, we will start by looking into using `read_csv()` to load in our data.

```{r}
#| eval: false
?read_csv
```

We are not able to use this function specifically, because this file is delimited by `;` and not a comma. We are able to use the `read_csv2()` function for semicolon delimited data. So, we will use this to read in our data below.

```{r}
data <- read_csv2("./data/data.txt",
          col_names = TRUE)
data
```

### Part b

Next, we will load in the `6` delimited data with an empty row. This should look the same as the data above when finished loading it in. We will use `read_delim()`.

```{r}
data1 <- read_delim("./data/data2.txt",
                    delim = "6",
                    col_names = TRUE,
                    col_types = "fdc")
data1
```

## Task 2

### Part a

We will first load in the `trailblazer` data and ensure that it has been loaded in properly.

```{r}
trailblazer <- read_csv("./data/trailblazer.csv")
glimpse(trailblazer)
```

This looks to be read in correctly.

### Part b

Now, we will pivot the data to have `Player`, `Game`, `Location`, and `Points`.

```{r}
library(tidyr)
trailblazer_longer <- trailblazer |> 
  pivot_longer(cols = 2:11,
               names_to = c("Game", "Location"),
               names_sep = "_",
               values_to = "Points")
trailblazer_longer |> head(5)
```

This data set does have 90 rows and 4 columns. We printed out the first 5 as directed.

### Part c

We will now investigate which players scored more, on average, when playing at home versus when playing away. We will first use `pivot_wider()` on our new data set to get columns `Player`, `Game`, `Home`, and `Away`.

```{r}
trailblazer_longer |> 
  pivot_wider(names_from = "Location",
              values_from = "Points"
              ) |>
  group_by(Player) |>
  mutate(mean_home = mean(Home, na.rm = TRUE),
         mean_away = mean(Away, na.rm = TRUE),
         diff = mean_home - mean_away) |>
  arrange(desc(diff))
```


In the first 10 games of the season, Jusuf Nurkic, Robert Covington, Nassir Little, Damian Lillard, and Cody Zeller all scored more points, on average, for home games than away games.

## Task 3

### Part a

We will now load in the penguins data set for use for the next tasks.

```{r}
library(palmerpenguins)
```

Next, we will look at the provided code attempting to pivot the data into a wider format.

```{r}
penguins |>
select(species, island, bill_length_mm) |>
pivot_wider(
names_from = island, values_from = bill_length_mm
)
```

This is happening due to the structure of the data. We are asking for the columns to come from the `island` variable, but there are multiple bill lengths for each species within that island. This means that the new entries are going to be lists with all of the specific values within it. For instance, there is a list of 52 doubles for the Adelie species on the Torgersen island (so, all of the 52 values got put into one entry as a list).m There are also null values, which most likely indicated that there were none of that species on that island measured for bill length.

### Part b

We will now try to recreate the second table provided in the file using the `penguins` data set. From the insight above, we know that we are trying to represent the count of the bird of each species within each island. The `count` function from `dplyr` will help with this.


```{r}
penguins |>
  group_by(species, island) |>
  summarise(count = n()) |>
  pivot_wider(names_from = island,
              values_from = count,
              values_fill = 0)
```

This output provides the table desired.


## Task 4

Now, we know the `NA` values from the `penguins` data set. We will use one pipeline to add those values and print the first 10 observations of the tibble in ascending order to ensure that this worked as desired.


```{r}
penguins |>
  mutate(bill_length_mm = case_when(
    is.na(bill_length_mm) & species == "Adelie" ~ 26,
    is.na(bill_length_mm) & species == "Gentoo" ~ 30,
    TRUE ~ bill_length_mm))|>
  arrange(bill_length_mm) |>
  slice_head(n = 10)
```

This arrangement and printed output shows that the `NA` values were correctly changed.

